{"version":3,"sources":["Note.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Note","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","button","margin","spacing","root","width","App","classes","useState","input","setInput","notes","setNotes","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","note","console","log","className","FormControl","TextField","id","label","variant","multiline","value","onChange","event","target","Button","color","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gTAUeA,I,iBCGTC,EAXcC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGIC,YCNjBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNC,OAAQF,EAAMG,QAAQ,IAExBC,KAAM,CACJ,uBAAwB,CACtBF,OAAQF,EAAMG,QAAQ,GACtBE,MAAO,cA4DEC,MApDf,WACE,IAAMC,EAAUT,IADH,EAEaU,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGaF,mBAAS,IAHtB,mBAGNG,EAHM,KAGCC,EAHD,KAwBb,OAVAC,qBAAU,WACR3B,EAAG4B,WAAW,SACbC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACVL,EAASK,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,OAAOC,SAC7CC,QAAQC,IAAIP,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,gBAE1C,IAID,yBAAKI,UAAU,OACb,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAWC,GAAG,iBAAiBC,MAAM,cAAcC,QAAQ,WAAWC,WAAS,EAACC,MAAOvB,EAAOwB,SAAU,SAAAC,GAAK,OAAIxB,EAASwB,EAAMC,OAAOH,UACvI,kBAACI,EAAA,EAAD,CACEN,QAAQ,YACRO,MAAM,UACNZ,UAAWlB,EAAQN,OACnBqC,QA5BW,SAACJ,GAChBA,EAAMK,iBAENrD,EAAG4B,WAAW,SAAS0B,IAAI,CACzBlB,KAAMb,EACNgC,UAAWtD,IAASU,UAAU6C,WAAWC,oBAE3CjC,EAAS,KAsBLkC,UAAWnC,GALb,SAYA,yBAAKgB,UAAU,SAAf,IACEd,EAAMQ,KAAI,SAAAG,UCnDEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.d0d8b64a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Note(props) {\r\n    return (\r\n        <div className=\"note\">\r\n            {props.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Note\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyC93mxWiGfL3x7jvfdenrigLOw08a5-U5I\",\r\n    authDomain: \"keep-clone-39dbd.firebaseapp.com\",\r\n    databaseURL: \"https://keep-clone-39dbd.firebaseio.com\",\r\n    projectId: \"keep-clone-39dbd\",\r\n    storageBucket: \"keep-clone-39dbd.appspot.com\",\r\n    messagingSenderId: \"360044451602\",\r\n    appId: \"1:360044451602:web:9a85f8a02885c7f59745cb\",\r\n    measurementId: \"G-QW84G8W60P\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport { db };","import React, {useState, useEffect} from 'react';\nimport {Button, makeStyles, TextField, FormControl } from '@material-ui/core';\nimport './App.css';\nimport Note from './Note';\nimport { db } from \"./firebase\";\nimport firebase from 'firebase';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    '& .MuiInputBase-root': {\n      margin: theme.spacing(1),\n      width: '500px',\n    },\n  }\n  \n}));\n\n\n\nfunction App() {\n  const classes = useStyles();\n  const [input, setInput] = useState('');\n  const [notes, setNotes] = useState([]);\n  const sendNote = (event) => {\n    event.preventDefault();\n    // all the logic to send a message goes here\n    db.collection('notes').add({\n      note: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    setInput(''); \n  };\n\n  useEffect(() => {\n    db.collection('notes')\n    .orderBy('timestamp', 'desc' )\n    .onSnapshot(snapshot => {\n      setNotes(snapshot.docs.map(doc => doc.data().note));\n      console.log(snapshot.docs.map(doc => doc.data()));\n    })\n  }, []);\n  \n\n  return (\n    <div className=\"App\">\n      <FormControl>\n      <TextField id=\"outlined-basic\" label=\"Take a note\" variant=\"outlined\" multiline value={input} onChange={event => setInput(event.target.value) }/>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        onClick={sendNote}\n        disabled={!input}\n      >\n        Send\n      </Button>\n      </FormControl>\n\n\n      <div className=\"notes\"> { \n        notes.map(note => (\n          // <p>{note}</p>\n          <Note text={note}/>\n        ))\n      }\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}